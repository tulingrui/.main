<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>yo this is tulingrui</title>
  
  
  <link href="/main/atom.xml" rel="self"/>
  
  <link href="https://tulingrui.github.io/main/"/>
  <updated>2019-08-05T06:53:26.469Z</updated>
  <id>https://tulingrui.github.io/main/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mySql分组后的所有数据列根据组内的某字段倒序展示</title>
    <link href="https://tulingrui.github.io/main/2019/08/05/mySql%E5%88%86%E7%BB%84%E5%90%8E%E7%9A%84%E6%89%80%E6%9C%89%E6%95%B0%E6%8D%AE%E5%88%97%E6%A0%B9%E6%8D%AE%E7%BB%84%E5%86%85%E7%9A%84%E6%9F%90%E5%AD%97%E6%AE%B5%E5%80%92%E5%BA%8F%E5%B1%95%E7%A4%BA/"/>
    <id>https://tulingrui.github.io/main/2019/08/05/mySql分组后的所有数据列根据组内的某字段倒序展示/</id>
    <published>2019-08-05T06:32:00.000Z</published>
    <updated>2019-08-05T06:53:26.469Z</updated>
    
    <content type="html"><![CDATA[<h2 id="mySql分组后的所有数据列根据组内的某字段倒序展示"><a href="#mySql分组后的所有数据列根据组内的某字段倒序展示" class="headerlink" title="mySql分组后的所有数据列根据组内的某字段倒序展示"></a>mySql分组后的所有数据列根据组内的某字段倒序展示</h2><p>场景</p><blockquote><p>用户数据在A表</p><p>员工操作修改时不允许更新A表数据要单独存另外B表里（存在多次修改），但查询时要显示最新的 </p></blockquote><p>那么 写个子查询 在子查询中排序，然后再分组就可以了</p><pre><code>SELECT `name`,age FROM (    SELECT a.`name` AS `name`,b.age AS age     FROM tb_a a    LEFT JOIN b ON a.`name` = b.`name`    ORDER BY b.createTime DESC    LIMIT 10000000  ) dd  GROUP BY `name`</code></pre><p>要注意的是 mysql 5.7之后子查询内排序是无效的，所以加上limit</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;mySql分组后的所有数据列根据组内的某字段倒序展示&quot;&gt;&lt;a href=&quot;#mySql分组后的所有数据列根据组内的某字段倒序展示&quot; class=&quot;headerlink&quot; title=&quot;mySql分组后的所有数据列根据组内的某字段倒序展示&quot;&gt;&lt;/a&gt;mySql分组后
      
    
    </summary>
    
      <category term="数据库" scheme="https://tulingrui.github.io/main/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
  </entry>
  
  <entry>
    <title>Tomcat命令行窗口中文乱码</title>
    <link href="https://tulingrui.github.io/main/2019/07/24/Tomcat%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%AA%97%E5%8F%A3%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/"/>
    <id>https://tulingrui.github.io/main/2019/07/24/Tomcat命令行窗口中文乱码/</id>
    <published>2019-07-24T02:18:20.000Z</published>
    <updated>2019-07-24T02:18:22.364Z</updated>
    
    <content type="html"><![CDATA[<p>##Tomcat命令行窗口中文乱码</p><p>新下的Tomcat打开之后中文都乱码了 虽然不影响但看着烦</p><p>打开 conf 目录下 logging.properties 文件</p><p>找到 java.util.logging.ConsoleHandler.encoding 改成GBK</p><p>如果没有就添加这行</p><pre><code>java.util.logging.ConsoleHandler.encoding = GBK</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;##Tomcat命令行窗口中文乱码&lt;/p&gt;
&lt;p&gt;新下的Tomcat打开之后中文都乱码了 虽然不影响但看着烦&lt;/p&gt;
&lt;p&gt;打开 conf 目录下 logging.properties 文件&lt;/p&gt;
&lt;p&gt;找到 java.util.logging.ConsoleHandle
      
    
    </summary>
    
      <category term="Java" scheme="https://tulingrui.github.io/main/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>jquery.print打印预览空白无打印内容</title>
    <link href="https://tulingrui.github.io/main/2019/07/23/jquery.print%E6%89%93%E5%8D%B0%E9%A2%84%E8%A7%88%E7%A9%BA%E7%99%BD/"/>
    <id>https://tulingrui.github.io/main/2019/07/23/jquery.print打印预览空白/</id>
    <published>2019-07-23T06:10:39.000Z</published>
    <updated>2019-07-23T06:11:31.342Z</updated>
    
    <content type="html"><![CDATA[<h2 id="jquery-print打印预览空白无打印内容"><a href="#jquery-print打印预览空白无打印内容" class="headerlink" title="jquery.print打印预览空白无打印内容"></a>jquery.print打印预览空白无打印内容</h2><p>环境：Chrome浏览器</p><p>在打印时偶尔会出现一片空白无打印内容的情况</p><p>搜了很多 大部分都是说 改源码、延时加载等</p><p>或者加上open方法</p><pre><code>var doc = iframe.contentWindow.document;//↓新加的doc.open();</code></pre><p>但也还是出现空白的情况</p><p>最后我发现 在HTML的头部加上</p><pre><code>&lt;meta http-equiv=&quot;Access-Control-Allow-Origin&quot; content=&quot;*&quot;&gt;</code></pre><p>就解决了这个问题，但这个标签是解决跨域用的 可能是浏览器的打印功能与页面之间存在跨域…? 但也不是每次都会出现空白内容 8知道怎么回事了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;jquery-print打印预览空白无打印内容&quot;&gt;&lt;a href=&quot;#jquery-print打印预览空白无打印内容&quot; class=&quot;headerlink&quot; title=&quot;jquery.print打印预览空白无打印内容&quot;&gt;&lt;/a&gt;jquery.print打印预览空
      
    
    </summary>
    
      <category term="前端" scheme="https://tulingrui.github.io/main/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>channel is already closed due to channel error; protocol method</title>
    <link href="https://tulingrui.github.io/main/2019/07/15/RabbitMQ-channel%20is%20already%20closed%20due%20to%20channel%20error;%20protocol%20method/"/>
    <id>https://tulingrui.github.io/main/2019/07/15/RabbitMQ-channel is already closed due to channel error; protocol method/</id>
    <published>2019-07-15T08:31:25.000Z</published>
    <updated>2019-07-15T08:47:53.780Z</updated>
    
    <content type="html"><![CDATA[<h2 id="channel-is-already-closed-due-to-channel-error-protocol-method"><a href="#channel-is-already-closed-due-to-channel-error-protocol-method" class="headerlink" title="channel is already closed due to channel error; protocol method"></a>channel is already closed due to channel error; protocol method</h2><p>in Java use RabbitMQ Client develop，using work model occurred error “channel is already closed due to channel error; protocol method”</p><p>info ↓</p><pre><code>Exception in thread &quot;main&quot; com.rabbitmq.client.AlreadyClosedException: channel is already closed due to channel error; protocol method: #method&lt;channel.close&gt;(reply-code=406, reply-text=PRECONDITION_FAILED - unknown delivery tag 1, class-id=60, method-id=80)at com.rabbitmq.client.impl.AMQChannel.ensureIsOpen(AMQChannel.java:190)at com.rabbitmq.client.impl.AMQChannel.transmit(AMQChannel.java:291)at com.rabbitmq.client.impl.AMQChannel.transmit(AMQChannel.java:285)at com.rabbitmq.client.impl.ChannelN.basicAck(ChannelN.java:1012)at com.tlr.rabbitMQ.consumer.SimpleMsgConsumer.main(SimpleMsgConsumer.java:35)</code></pre><p>AutoAck true is automatic</p><pre><code>channel.basicConsume(QUEUE_NAME, true, consumer);</code></pre><p>so</p><pre><code>// OKchannel.basicConsume(QUEUE_NAME, false, consumer);</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;channel-is-already-closed-due-to-channel-error-protocol-method&quot;&gt;&lt;a href=&quot;#channel-is-already-closed-due-to-channel-error-protocol-me
      
    
    </summary>
    
      <category term="RabbitMQ" scheme="https://tulingrui.github.io/main/categories/RabbitMQ/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringCloud-Config Cannot clone or checkout repository</title>
    <link href="https://tulingrui.github.io/main/2019/07/07/SpringCloud-Config%20Cannot%20clone%20or%20checkout%20repository/"/>
    <id>https://tulingrui.github.io/main/2019/07/07/SpringCloud-Config Cannot clone or checkout repository/</id>
    <published>2019-07-07T05:38:44.000Z</published>
    <updated>2019-07-07T05:38:45.250Z</updated>
    
    <content type="html"><![CDATA[<p>##SpringCloud-Config Cannot clone or checkout repository</p><p>看视频学时url地址是使用的ssh</p><p>配置好访问时却报 Cannot clone or checkout repository</p><p>于是换成HTTPS 可以了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;##SpringCloud-Config Cannot clone or checkout repository&lt;/p&gt;
&lt;p&gt;看视频学时url地址是使用的ssh&lt;/p&gt;
&lt;p&gt;配置好访问时却报 Cannot clone or checkout repository&lt;/p&gt;
      
    
    </summary>
    
      <category term="Java" scheme="https://tulingrui.github.io/main/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringCloud-Eureka集群启动时候Read timed out</title>
    <link href="https://tulingrui.github.io/main/2019/07/02/SpringCloud-Eureka%E5%90%AF%E5%8A%A8%E6%97%B6%E5%80%99Read%20Timeout/"/>
    <id>https://tulingrui.github.io/main/2019/07/02/SpringCloud-Eureka启动时候Read Timeout/</id>
    <published>2019-07-02T06:14:36.000Z</published>
    <updated>2019-07-02T06:19:32.355Z</updated>
    
    <content type="html"><![CDATA[<p>##SpringCloud-Eureka集群启动时候Read timed out</p><pre><code>Caused by: java.net.SocketTimeoutException: Read timed outat java.net.SocketInputStream.socketRead0(Native Method) ~[na:1.8.0_144]at java.net.SocketInputStream.socketRead(SocketInputStream.java:116) ~[na:1.8.0_144]at java.net.SocketInputStream.read(SocketInputStream.java:171) ~[na:1.8.0_144]at java.net.SocketInputStream.read(SocketInputStream.java:141) ~[na:1.8.0_144]at org.apache.http.impl.io.AbstractSessionInputBuffer.fillBuffer(AbstractSessionInputBuffer.java:161) ~[httpcore-4.4.8.jar:4.4.8]at org.apache.http.impl.io.SocketInputBuffer.fillBuffer(SocketInputBuffer.java:82) ~[httpcore-4.4.8.jar:4.4.8]at org.apache.http.impl.io.AbstractSessionInputBuffer.readLine(AbstractSessionInputBuffer.java:278) ~[httpcore-4.4.8.jar:4.4.8]at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:138) ~[httpclient-4.5.3.jar:4.5.3]at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:56) ~[httpclient-4.5.3.jar:4.5.3]at org.apache.http.impl.io.AbstractMessageParser.parse(AbstractMessageParser.java:259) ~[httpcore-4.4.8.jar:4.4.8]at org.apache.http.impl.AbstractHttpClientConnection.receiveResponseHeader(AbstractHttpClientConnection.java:286) ~[httpcore-4.4.8.jar:4.4.8]at org.apache.http.impl.conn.DefaultClientConnection.receiveResponseHeader(DefaultClientConnection.java:257) ~[httpclient-4.5.3.jar:4.5.3]at org.apache.http.impl.conn.AbstractClientConnAdapter.receiveResponseHeader(AbstractClientConnAdapter.java:230) ~[httpclient-4.5.3.jar:4.5.3]at org.apache.http.protocol.HttpRequestExecutor.doReceiveResponse(HttpRequestExecutor.java:273) ~[httpcore-4.4.8.jar:4.4.8]at org.apache.http.protocol.HttpRequestExecutor.execute(HttpRequestExecutor.java:125) ~[httpcore-4.4.8.jar:4.4.8]at org.apache.http.impl.client.DefaultRequestDirector.tryExecute(DefaultRequestDirector.java:684) ~[httpclient-4.5.3.jar:4.5.3]at org.apache.http.impl.client.DefaultRequestDirector.execute(DefaultRequestDirector.java:486) ~[httpclient-4.5.3.jar:4.5.3]at org.apache.http.impl.client.AbstractHttpClient.doExecute(AbstractHttpClient.java:835) ~[httpclient-4.5.3.jar:4.5.3]at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:118) ~[httpclient-4.5.3.jar:4.5.3]at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:56) ~[httpclient-4.5.3.jar:4.5.3]at com.sun.jersey.client.apache4.ApacheHttpClient4Handler.handle(ApacheHttpClient4Handler.java:173) ~[jersey-apache-client4-1.19.1.jar:1.19.1]... 10 common frames omitted</code></pre><p>一共3个Eureka服务，每次我启动时都是同一个服务会报出Read timed out,所有集群启动完成之后就不会报了 倒也没什么影响，搜了1下。</p><p>这样说的</p><blockquote><p>Eureka在同步集群节点时报错，因为时顺序启动，当第一个启动成功之后，同步不了节点就报错了，集群全部启动之后就不会报了</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;##SpringCloud-Eureka集群启动时候Read timed out&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Caused by: java.net.SocketTimeoutException: Read timed out
at java.net.SocketInpu
      
    
    </summary>
    
      <category term="Java" scheme="https://tulingrui.github.io/main/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>Js链式调用思路</title>
    <link href="https://tulingrui.github.io/main/2019/06/26/Js%E9%93%BE%E5%BC%8F%E8%B0%83%E7%94%A8%E6%80%9D%E8%B7%AF/"/>
    <id>https://tulingrui.github.io/main/2019/06/26/Js链式调用思路/</id>
    <published>2019-06-26T07:16:29.000Z</published>
    <updated>2019-06-26T08:41:25.998Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Js链式调用思路"><a href="#Js链式调用思路" class="headerlink" title="Js链式调用思路"></a>Js链式调用思路</h2><p>今天突然想到Js链式调用，效果这样 ↓</p><pre><code>&gt; tool.加(1,2,3,4).减(1,1,3).乘(10,10).除(2,2).和();&lt; 20</code></pre><p>代码如下，一个加减乘除的方法</p><pre><code>var tool = {    x : 0,    加 : (...n) =&gt; {            tool.x += n.reduce((m,c)=&gt;m+c);            return tool;    },    减 : (...n) =&gt; {            tool.x += n.reduce((m,c)=&gt;m-c);            return tool;    },    乘 : (...n) =&gt; {            tool.x *=n.reduce((m,c)=&gt;m*c);            return tool;    },    除 : (...n) =&gt; {            for(var x of n){                tool.x/=x;            }            return tool;    },    和 : () =&gt; {            var x = tool.x;            tool.x = 0;            return x;    }};</code></pre><p>思路就是当调用其中1个方法计算结束后 返回函数tool</p><p>这样做 </p><pre><code>tool.加(1,2,3).减(1,2,3);</code></pre><p>就等同于</p><pre><code>tool.加(1,2,3);tool.减(1,2,3);</code></pre><p>当然最后要返回值的嘛，把想计算的写完后再调用 和();将函数中存计算值的变量清空再返回</p><pre><code>var x = tool.x;tool.x = 0;return x;</code></pre><hr><p>在segmentfault还看到另外一种链式调用写法</p><blockquote><p><a href="https://segmentfault.com/a/1190000008724608?utm_source=tag-newest" target="_blank" rel="noopener">https://segmentfault.com/a/1190000008724608?utm_source=tag-newest</a></p></blockquote><p>效果</p><pre><code>&gt;add(1)(2)(3) //6</code></pre><p>代码</p><pre><code>function add (num) {    var count = num;    var _b = function(l){        count += l;        return _b    }    _b.valueOf = function(){        return count    }    return _b}</code></pre><p><em>在方法体内部通过私有方法实现运算，由于闭包 count得以累加 利用valueOf来存返回值，<br>最后返回计算方法<strong>b，而再次调用时调用的是前一次返回的</strong>b方法本身，这样就实现了链式。</em></p><p><em>最后就是得到的结果, b并不是数字而是一个方法，重写valueOf指定了_b方法的原始值，所以console.log输出时_b显示的是计算值，而调用b方法时还会继续进行计算</em></p><p>举个栗子 ↓ </p><pre><code>function test(){    return 5;}test.valueOf = function (){ return 20}console.log(test); // 20console.log(test());// 5</code></pre><p>这样来看就简单了 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Js链式调用思路&quot;&gt;&lt;a href=&quot;#Js链式调用思路&quot; class=&quot;headerlink&quot; title=&quot;Js链式调用思路&quot;&gt;&lt;/a&gt;Js链式调用思路&lt;/h2&gt;&lt;p&gt;今天突然想到Js链式调用，效果这样 ↓&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; tool.加
      
    
    </summary>
    
      <category term="前端" scheme="https://tulingrui.github.io/main/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>Ajax调用接口HTTP状态是成功但走的error</title>
    <link href="https://tulingrui.github.io/main/2019/06/25/Ajax%E8%B0%83%E7%94%A8%E6%8E%A5%E5%8F%A3HTTP%E7%8A%B6%E6%80%81%E6%98%AF%E6%88%90%E5%8A%9F%E4%BD%86%E8%B5%B0%E7%9A%84error/"/>
    <id>https://tulingrui.github.io/main/2019/06/25/Ajax调用接口HTTP状态是成功但走的error/</id>
    <published>2019-06-25T03:18:23.000Z</published>
    <updated>2019-06-25T03:19:39.174Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Ajax调用接口HTTP状态是成功但走的error"><a href="#Ajax调用接口HTTP状态是成功但走的error" class="headerlink" title="Ajax调用接口HTTP状态是成功但走的error"></a>Ajax调用接口HTTP状态是成功但走的error</h2><p>之前和其他同事对接接口时 调他的接口在浏览器看是没问题，Chrome控制台看也是没异常可以转换成对象格式 但Ajax调用时一直走error 不走success HTTP状态码又是200<br>最后发现还是他返回数据的格式问题</p><pre><code>{msg : &quot;ok&quot;} </code></pre><p>这种格式浏览器不认为是错误的，可以正确的转换成对象格式，然后到ajax就会认为是错误的了</p><p>so 改成</p><pre><code>{&quot;msg&quot; : &quot;ok&quot;}</code></pre><p>键要加上双引号 这样就可以了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Ajax调用接口HTTP状态是成功但走的error&quot;&gt;&lt;a href=&quot;#Ajax调用接口HTTP状态是成功但走的error&quot; class=&quot;headerlink&quot; title=&quot;Ajax调用接口HTTP状态是成功但走的error&quot;&gt;&lt;/a&gt;Ajax调用接口HTT
      
    
    </summary>
    
      <category term="前端" scheme="https://tulingrui.github.io/main/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>lombok注解引用不到与无效问题</title>
    <link href="https://tulingrui.github.io/main/2019/06/20/lombok%E6%B3%A8%E8%A7%A3%E5%BC%95%E7%94%A8%E4%B8%8D%E5%88%B0%E4%B8%8E%E6%97%A0%E6%95%88%E9%97%AE%E9%A2%98/"/>
    <id>https://tulingrui.github.io/main/2019/06/20/lombok注解引用不到与无效问题/</id>
    <published>2019-06-20T13:43:26.000Z</published>
    <updated>2019-06-21T01:41:24.941Z</updated>
    
    <content type="html"><![CDATA[<h2 id="lombok注解引用不到与无效问题"><a href="#lombok注解引用不到与无效问题" class="headerlink" title="lombok注解引用不到与无效问题"></a>lombok注解引用不到与无效问题</h2><p>POM中明明都引入了maven仓库中也有包 但是写注解的时候就是提示找不到引入包</p><p>解决：进到maven仓库 把lombok包删除掉，再maven update项目 重新下载后就好了</p><hr><p>但是这时又发现虽然注解需要的包引入了，但是没效果！</p><p>解决：打开lombok目录下的lombok.jar 然后Specify location 选myEclipse目录下的myEclipse.exe （eclipse一样的） ，然后Install ，重启一下IDE OK了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;lombok注解引用不到与无效问题&quot;&gt;&lt;a href=&quot;#lombok注解引用不到与无效问题&quot; class=&quot;headerlink&quot; title=&quot;lombok注解引用不到与无效问题&quot;&gt;&lt;/a&gt;lombok注解引用不到与无效问题&lt;/h2&gt;&lt;p&gt;POM中明明都引入了
      
    
    </summary>
    
      <category term="Java" scheme="https://tulingrui.github.io/main/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>百度输入法 天下第一坑</title>
    <link href="https://tulingrui.github.io/main/2019/06/10/%E7%99%BE%E5%BA%A6%E8%BE%93%E5%85%A5%E6%B3%95%20%E5%A4%A9%E4%B8%8B%E7%AC%AC%E4%B8%80%E5%9D%91/"/>
    <id>https://tulingrui.github.io/main/2019/06/10/百度输入法 天下第一坑/</id>
    <published>2019-06-10T09:47:29.000Z</published>
    <updated>2019-06-10T09:47:54.822Z</updated>
    
    <content type="html"><![CDATA[<h2 id="百度输入法-天下第一坑"><a href="#百度输入法-天下第一坑" class="headerlink" title="百度输入法 天下第一坑"></a>百度输入法 天下第一坑</h2><p>今天发现线上服务的服务器内存占用很多，8G的内存居然占用60%多</p><p>打开控制台 发现百度输入法的服务占用了居然快2个G ，嗯？？？？</p><p>直接卸载，但发现卸载完输入法还在，直接找安装目录把占用的应用关掉再删文件</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;百度输入法-天下第一坑&quot;&gt;&lt;a href=&quot;#百度输入法-天下第一坑&quot; class=&quot;headerlink&quot; title=&quot;百度输入法 天下第一坑&quot;&gt;&lt;/a&gt;百度输入法 天下第一坑&lt;/h2&gt;&lt;p&gt;今天发现线上服务的服务器内存占用很多，8G的内存居然占用60%多&lt;/
      
    
    </summary>
    
      <category term="其他" scheme="https://tulingrui.github.io/main/categories/%E5%85%B6%E4%BB%96/"/>
    
    
  </entry>
  
  <entry>
    <title>内存泄漏和内存溢出</title>
    <link href="https://tulingrui.github.io/main/2019/05/23/%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E4%B8%8E%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA/"/>
    <id>https://tulingrui.github.io/main/2019/05/23/内存泄漏与内存溢出/</id>
    <published>2019-05-23T03:27:52.000Z</published>
    <updated>2019-06-10T07:00:19.890Z</updated>
    
    <content type="html"><![CDATA[<h2 id="内存泄漏和内存溢出"><a href="#内存泄漏和内存溢出" class="headerlink" title="内存泄漏和内存溢出"></a>内存泄漏和内存溢出</h2><p>内存泄漏和内存溢出的区别，它俩是两个完全不同的概念， 它们之间存在一些关联。</p><p>内存溢出 out of memory，是指程序在申请内存时，没有足够的内存空间供其使用，出现 out of memory；</p><p>内存泄露 memory leak，是指程序在申请内存后，无法释放已申请的内存空间，一次内存泄露危害可以忽略，但内存泄露堆积后果很严重，无论多少内存,迟早会被占光。</p><p>所以内存泄漏可能会导致内存溢出，但内存溢出并不完全都是因为内存泄漏，也有可能使用了太多的大对象导致。</p><pre><code>作者：ityouknow链接：https://juejin.im/post/5ce5d750f265da1b6a346b91</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;内存泄漏和内存溢出&quot;&gt;&lt;a href=&quot;#内存泄漏和内存溢出&quot; class=&quot;headerlink&quot; title=&quot;内存泄漏和内存溢出&quot;&gt;&lt;/a&gt;内存泄漏和内存溢出&lt;/h2&gt;&lt;p&gt;内存泄漏和内存溢出的区别，它俩是两个完全不同的概念， 它们之间存在一些关联。&lt;/p&gt;
      
    
    </summary>
    
      <category term="其他" scheme="https://tulingrui.github.io/main/categories/%E5%85%B6%E4%BB%96/"/>
    
    
  </entry>
  
  <entry>
    <title>微信授权时一直不断获取授权的问题记录</title>
    <link href="https://tulingrui.github.io/main/2019/05/22/%E5%BE%AE%E4%BF%A1%E6%8E%88%E6%9D%83%E6%97%B6%E5%87%BA%E7%8E%B0%E4%BA%86%E4%B8%80%E7%9B%B4%E4%B8%8D%E6%96%AD%E8%8E%B7%E5%8F%96%E6%8E%88%E6%9D%83%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://tulingrui.github.io/main/2019/05/22/微信授权时出现了一直不断获取授权的问题/</id>
    <published>2019-05-22T06:01:20.000Z</published>
    <updated>2019-06-10T07:00:39.235Z</updated>
    
    <content type="html"><![CDATA[<p>##微信授权时一直不断获取授权的问题记录##</p><p>最近要开发新的微信功能，在本地搭环境测试时获取微信授权时出现了一直不断获取授权的情况</p><p>都做了这么久了，之前也没遇到过这个问题，想了半天才找到原因</p><blockquote><p>前端接口访问时带上了项目名 <a href="http://xxxx/项目名/action" target="_blank" rel="noopener">http://xxxx/项目名/action</a></p></blockquote><p>因为后端做了虚拟路径 所以访问时可以不带项目名 也可以带项目名 </p><p>而后端设置的微信回调的地址是不带项目名的</p><p>这时在进行获取微信授权时就发生了一直不断的获取授权的情况</p><p>刚开始打开控制台看了一下 发现每次的sessionId都是不一样的</p><p>排查了半天 还以为是nginx配置的有问题</p><p>最后发现请求URL中带了项目名，突然想到回调的是不带项目名的 所以session每次都是不一样的</p><p>太久没开发微信 想不起来这个事 居然犯这种傻问题 真是浪费时间….</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;##微信授权时一直不断获取授权的问题记录##&lt;/p&gt;
&lt;p&gt;最近要开发新的微信功能，在本地搭环境测试时获取微信授权时出现了一直不断获取授权的情况&lt;/p&gt;
&lt;p&gt;都做了这么久了，之前也没遇到过这个问题，想了半天才找到原因&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;前端接口访问时
      
    
    </summary>
    
      <category term="Java" scheme="https://tulingrui.github.io/main/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>今天赚了1000块 耶</title>
    <link href="https://tulingrui.github.io/main/2019/05/15/%E4%BB%8A%E5%A4%A9%E8%B5%9A%E4%BA%861000%E5%9D%97/"/>
    <id>https://tulingrui.github.io/main/2019/05/15/今天赚了1000块/</id>
    <published>2019-05-15T08:01:31.000Z</published>
    <updated>2019-06-10T07:00:14.484Z</updated>
    
    <content type="html"><![CDATA[<p>##今天赚了1000块 耶##</p><p>去年2018年九十月份买了4000的BTC</p><p>才零点零零几 接着就开始跌跌跌跌，偶尔看一眼 又跌了 最后一次看 卖出去只能卖2000多，就没再想着了</p><p>今天突然看到新闻 喔嚯</p><p><strong>BTC突破8000美元了</strong></p><p>打开遗忘在手机角落里的交易软件 嗯 密码我都忘了 找回1下</p><p>然后进交易中看下 预估价值变5000多了 nice</p><p>赶紧出手 小赚1000块 hahah 够买挺多零食了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;##今天赚了1000块 耶##&lt;/p&gt;
&lt;p&gt;去年2018年九十月份买了4000的BTC&lt;/p&gt;
&lt;p&gt;才零点零零几 接着就开始跌跌跌跌，偶尔看一眼 又跌了 最后一次看 卖出去只能卖2000多，就没再想着了&lt;/p&gt;
&lt;p&gt;今天突然看到新闻 喔嚯&lt;/p&gt;
&lt;p&gt;&lt;strong
      
    
    </summary>
    
      <category term="其他" scheme="https://tulingrui.github.io/main/categories/%E5%85%B6%E4%BB%96/"/>
    
    
  </entry>
  
  <entry>
    <title>线上服务器CPU满载问题排查</title>
    <link href="https://tulingrui.github.io/main/2019/05/14/%E7%BA%BF%E4%B8%8A%E6%9C%8D%E5%8A%A1%E5%99%A8CPU%E6%BB%A1%E8%BD%BD%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/"/>
    <id>https://tulingrui.github.io/main/2019/05/14/线上服务器CPU满载问题排查/</id>
    <published>2019-05-14T08:49:17.000Z</published>
    <updated>2019-07-24T02:07:04.713Z</updated>
    
    <content type="html"><![CDATA[<p>##线上服务器CPU满载问题排查</p><p>网站突然变得特别慢，打开登录页面都要等一会</p><p>上服务器看一下，连服务器就等了很久 连上之后就看到CPU100%了</p><p>任务管理器看了一下占用最高的tomcat的PID，</p><p>然后把进程快照导出</p><pre><code>jstack -l 6004 &gt; c:/6004.stack  </code></pre><p>然后用微软提供的Process Explorer v15.3 查看进程</p><blockquote><p><a href="https://docs.microsoft.com/zh-cn/sysinternals/downloads/process-explorer" target="_blank" rel="noopener">https://docs.microsoft.com/zh-cn/sysinternals/downloads/process-explorer</a></p></blockquote><p>打开之后右键需要查看的进程 -&gt; properties</p><p>然后选择Threads 就能看到占用CPU最高的线程了 </p><p>复制下TID 然后转换成16进制</p><p>再打开刚刚导出的进程的快照，搜16进制后的TID，就可以看到具体的原因了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;##线上服务器CPU满载问题排查&lt;/p&gt;
&lt;p&gt;网站突然变得特别慢，打开登录页面都要等一会&lt;/p&gt;
&lt;p&gt;上服务器看一下，连服务器就等了很久 连上之后就看到CPU100%了&lt;/p&gt;
&lt;p&gt;任务管理器看了一下占用最高的tomcat的PID，&lt;/p&gt;
&lt;p&gt;然后把进程快照导出&lt;
      
    
    </summary>
    
      <category term="Java" scheme="https://tulingrui.github.io/main/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>记一个初试WebSocket遇到的问题</title>
    <link href="https://tulingrui.github.io/main/2019/05/07/%E8%AE%B0%E4%B8%80%E4%B8%AA%E5%88%9D%E8%AF%95WebSocket%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://tulingrui.github.io/main/2019/05/07/记一个初试WebSocket遇到的问题/</id>
    <published>2019-05-07T09:10:21.000Z</published>
    <updated>2019-06-10T06:59:58.658Z</updated>
    
    <content type="html"><![CDATA[<p>记一个初试WebSocket遇到的问题</p><p>本机运行没问题，打包时报出</p><pre><code>java.lang.IllegalStateException: javax.websocket.server.ServerContainer not available</code></pre><p>我把打包测试关掉之后没问题了</p><pre><code>&lt;build&gt;    &lt;plugins&gt;        &lt;plugin&gt;            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;            &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;            &lt;configuration&gt;                &lt;source&gt;1.8&lt;/source&gt;                &lt;target&gt;1.8&lt;/target&gt;                &lt;encoding&gt;UTF-8&lt;/encoding&gt;                &lt;skip&gt;true&lt;/skip&gt;            &lt;/configuration&gt;        &lt;/plugin&gt;    &lt;/plugins&gt;&lt;/build&gt;</code></pre><p>可以打包了</p><p>而部署到服务器上运行时又报出</p><pre><code>java.lang.IllegalStateException: Failed to register @ServerEndpoint class</code></pre><p>搜了一下<br>需要改一下WebSocketConfig，将@Configuration 删掉</p><p>这时又报出了一个错误</p><pre><code>Failed to start component [StandardEngine[Catalina].StandardHost[localhost]]</code></pre><p>搜了一下说是Tomcat问题</p><p>换了个Tomcat8 OK了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;记一个初试WebSocket遇到的问题&lt;/p&gt;
&lt;p&gt;本机运行没问题，打包时报出&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;java.lang.IllegalStateException: javax.websocket.server.ServerContainer not avail
      
    
    </summary>
    
      <category term="Java" scheme="https://tulingrui.github.io/main/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>记一个项目事故</title>
    <link href="https://tulingrui.github.io/main/2019/04/17/%E8%AE%B0%E4%B8%80%E4%BA%8B%E6%95%85md/"/>
    <id>https://tulingrui.github.io/main/2019/04/17/记一事故md/</id>
    <published>2019-04-17T12:34:16.000Z</published>
    <updated>2019-06-10T07:00:01.490Z</updated>
    
    <content type="html"><![CDATA[<h2 id="记一个项目事故"><a href="#记一个项目事故" class="headerlink" title="记一个项目事故"></a>记一个项目事故</h2><p>最近两个月做了一个支持服务 </p><p>同事的设备会有源源不断的请求来查询账号</p><p>而多数请求是需要我去调用另外一个厂家（硬件合作关系）的查询接口得到账号</p><p><strong>（这个厂家不给用户提供查询账号的接口，而他们的官网登录后却可以查到，没办法 我只能去扒取他们的内部接口调用）</strong></p><p>服务正式上线使用持续了一个多月 没有问题</p><p>而今天 突然报出了很多 查询失败的问题 </p><p>当然 之前就想到了查询失败的问题，所以返回了另外一种信息（一个Key）<br>Key也是可以使用的，但之前因为部分用户是电信网络会使用不了 所以改成返回账号的</p><p>接着 设备发生了大面积的停止工作，原因是 <strong>非法Key验证错误</strong></p><p>而这个Key是写死的不可能传错的</p><p>同事将设备当时报出错误的Key复制 去调试时却是正常可以使用的</p><p>而同时我的支持服务中去调用他们的查询接口时也不报错了</p><p>我和同事一沟通 都明白了 一定是厂家的服务出问题了，但使用账号的不受影响。</p><p>so 归根到底 在这个业务流程中 </p><p>我和同事与厂家之间都太信任依赖对方了</p><p>如果我的服务宕机了 那同事的设备就宕机了</p><p>如果厂家的接口出问题了，那我就没有正确数据返回了</p><p>领导知道情况后说的几句 我觉得很受益</p><blockquote><p>做通讯的 永远不要相信对方</p></blockquote><blockquote><p>一个优秀程序员的代码百分之80都在做错误分支的处理，真正处理业务的代码只有20%</p></blockquote><blockquote><p>发生错误又不确定怎么处理的时候，最好的办法就是什么都不做</p></blockquote><p>确实做了很多错误处理，也将那个Key返回了，但我没有用最优的方式保障服务</p><p>吃一堑长一智 赶紧把处理方案实现，这次事故后也将代码重新审查一番 更加完善了一些</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;记一个项目事故&quot;&gt;&lt;a href=&quot;#记一个项目事故&quot; class=&quot;headerlink&quot; title=&quot;记一个项目事故&quot;&gt;&lt;/a&gt;记一个项目事故&lt;/h2&gt;&lt;p&gt;最近两个月做了一个支持服务 &lt;/p&gt;
&lt;p&gt;同事的设备会有源源不断的请求来查询账号&lt;/p&gt;
&lt;p&gt;而
      
    
    </summary>
    
      <category term="Java" scheme="https://tulingrui.github.io/main/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>RSA加密导致内存溢出</title>
    <link href="https://tulingrui.github.io/main/2019/03/25/rsa/"/>
    <id>https://tulingrui.github.io/main/2019/03/25/rsa/</id>
    <published>2019-03-25T03:02:35.000Z</published>
    <updated>2019-06-10T06:59:14.677Z</updated>
    
    <content type="html"><![CDATA[<h2 id="RSA加密导致内存溢出"><a href="#RSA加密导致内存溢出" class="headerlink" title="RSA加密导致内存溢出"></a>RSA加密导致内存溢出</h2><p>近期做的一个功能需要用到RSA加密</p><p>之前没接触过</p><p>搜了一下然后就开始做了 功能完成上线测试时就发现问题了</p><p>内存飙升且降不下来 直到内存溢出Tomcat自动关闭了</p><p>再搜了1下 好多人都遇到这个问题 原因就是 </p><pre><code>BouncyCastleProvider </code></pre><p>这个类 每次 new一个就多一个，不回收</p><p>所以内存见增不见减</p><p>所有new的地方改成调用 getInstance()</p><pre><code>private static volatile BouncyCastleProvider bouncyCastleProvider = null;public static BouncyCastleProvider getInstance() {        if(null == bouncyCastleProvider){            synchronized(RSAUtil.class){                if(null == bouncyCastleProvider){                    bouncyCastleProvider = new BouncyCastleProvider();                }            }        }        return bouncyCastleProvider; }</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;RSA加密导致内存溢出&quot;&gt;&lt;a href=&quot;#RSA加密导致内存溢出&quot; class=&quot;headerlink&quot; title=&quot;RSA加密导致内存溢出&quot;&gt;&lt;/a&gt;RSA加密导致内存溢出&lt;/h2&gt;&lt;p&gt;近期做的一个功能需要用到RSA加密&lt;/p&gt;
&lt;p&gt;之前没接触过&lt;/p
      
    
    </summary>
    
      <category term="Java" scheme="https://tulingrui.github.io/main/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>1个困扰很久的问题</title>
    <link href="https://tulingrui.github.io/main/2019/03/15/1%E4%B8%AA%E9%83%A8%E7%BD%B2%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://tulingrui.github.io/main/2019/03/15/1个部署时遇到的问题/</id>
    <published>2019-03-15T02:24:01.000Z</published>
    <updated>2019-06-10T06:56:16.437Z</updated>
    
    <content type="html"><![CDATA[<p>更新项目时很多时候只改了一部分功能<br>所以 更新时也是本地编译后更新修改的部分文件</p><p>本地研发环境运行时是毫无问题</p><p>但是更新到服务器上时偶尔就会报出</p><pre><code>java (Ljava/lang/String;Ljava/lang/String;I)V</code></pre><p>差不多就这种的 有斜杠斜杠分开的不同类型的错误</p><p>怀疑过是环境问题导致错误</p><p>但是我将所有文件一起发布时又没问题了</p><p>反复之后发现 将与更新文件有相关调用的文件一起发布才可以</p><p>但是不明白原因</p><p>找了很久 发现这篇博客 </p><blockquote><p><a href="https://blog.csdn.net/dailywater/article/details/72848770" target="_blank" rel="noopener">https://blog.csdn.net/dailywater/article/details/72848770</a></p></blockquote><p><strong>方法签名不一致</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;更新项目时很多时候只改了一部分功能&lt;br&gt;所以 更新时也是本地编译后更新修改的部分文件&lt;/p&gt;
&lt;p&gt;本地研发环境运行时是毫无问题&lt;/p&gt;
&lt;p&gt;但是更新到服务器上时偶尔就会报出&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;java (Ljava/lang/String;Ljava/la
      
    
    </summary>
    
      <category term="Java" scheme="https://tulingrui.github.io/main/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>做爬虫时犯了一个很蠢的问题</title>
    <link href="https://tulingrui.github.io/main/2019/01/24/%E5%81%9A%E7%88%AC%E8%99%AB%E6%97%B6%E7%8A%AF%E4%BA%86%E4%B8%80%E4%B8%AA%E5%BE%88%E8%A0%A2%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://tulingrui.github.io/main/2019/01/24/做爬虫时犯了一个很蠢的问题/</id>
    <published>2019-01-24T13:41:09.000Z</published>
    <updated>2019-06-10T07:00:41.691Z</updated>
    
    <content type="html"><![CDATA[<h2 id="做爬虫时犯了一个很蠢的问题"><a href="#做爬虫时犯了一个很蠢的问题" class="headerlink" title="做爬虫时犯了一个很蠢的问题"></a>做爬虫时犯了一个很蠢的问题</h2><p>需要爬取的信息在同一个li下</p><p>一个a标签是地区名 在li下的span下 </p><p>一个a标签是标题带内容 在li下</p><p>之前抓取时没用到地区名 写的自动下载 ，没有问题</p><p>现在客户提出新需求，要抓取下地区名 所以改成手动加入队列下载</p><p>这时就发现 出现了 no protocol （无协议）</p><p>并且 我在处理下载内容的同时需要将获取的地区名再加到parameters中</p><p>而这时循环预下载列表中 获取地区名时 出现了下标越界 </p><p>嗯？？满脑袋问号</p><p>输出一下 好8 发现原来是同时把地区名的a标签的链接也抓取进来了</p><p>导致列表的数据大小直接double，而地区名数据的大小是正常大小的，所以下标越界了</p><p>而这时再去下载空字符的URL 就出现了 no protocol</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;做爬虫时犯了一个很蠢的问题&quot;&gt;&lt;a href=&quot;#做爬虫时犯了一个很蠢的问题&quot; class=&quot;headerlink&quot; title=&quot;做爬虫时犯了一个很蠢的问题&quot;&gt;&lt;/a&gt;做爬虫时犯了一个很蠢的问题&lt;/h2&gt;&lt;p&gt;需要爬取的信息在同一个li下&lt;/p&gt;
&lt;p&gt;一个a标
      
    
    </summary>
    
      <category term="Java" scheme="https://tulingrui.github.io/main/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>MyEclipse CI 2018 HTML标签不高亮显示</title>
    <link href="https://tulingrui.github.io/main/2018/12/29/MyEclipse%20CI%202018%20HTML%E6%A0%87%E7%AD%BE%E4%B8%8D%E9%AB%98%E4%BA%AE%E6%98%BE%E7%A4%BA/"/>
    <id>https://tulingrui.github.io/main/2018/12/29/MyEclipse CI 2018 HTML标签不高亮显示/</id>
    <published>2018-12-29T04:05:51.000Z</published>
    <updated>2019-06-10T06:59:07.404Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MyEclipse-CI-2018-HTML标签不高亮显示"><a href="#MyEclipse-CI-2018-HTML标签不高亮显示" class="headerlink" title="MyEclipse CI 2018 HTML标签不高亮显示"></a>MyEclipse CI 2018 HTML标签不高亮显示</h2><p>新版本的是在左侧行数的旁边变色显示的，看起来很不舒服 </p><p>Preferences &gt; General &gt; Editors &gt; File Associations &gt; 找到html 把编辑器改回JSP就好了！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;MyEclipse-CI-2018-HTML标签不高亮显示&quot;&gt;&lt;a href=&quot;#MyEclipse-CI-2018-HTML标签不高亮显示&quot; class=&quot;headerlink&quot; title=&quot;MyEclipse CI 2018 HTML标签不高亮显示&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="IDE" scheme="https://tulingrui.github.io/main/categories/IDE/"/>
    
    
  </entry>
  
</feed>
